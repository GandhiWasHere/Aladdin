@model IEnumerable<Aladdin.Controllers.StatisticsController.ProductsSells>
@{
    Layout = "~/Views/Shared/_LayoutNOHEADERFOOTER.cshtml";
    ViewData["Title"] = "Index";
    var ProductNames = (List<string>)ViewData["ProductNames"];
    var counter = ViewData["counter"];
    @*    var pro_len = ProductNames.Count();
        List<string> ProductNames_list = new List<string>();
        List<int> counter_list = new List<int>();
        foreach (var item in ProductNames)
        {
            ProductNames_list.Add(item);

        }*@

}

<!doctype html>
<html>
<head>
    <style>
        .bar {
            fill: steelblue;
        }

        .highlight {
            fill: orange;
        }
    </style>
    <script src="https://d3js.org/d3.v4.min.js"></script>
</head>
<body>
    <svg width="600" height="500"></svg>
    <script>

        var svg = d3.select("svg"),
            margin = 200,
            width = svg.attr("width") - margin,
            height = svg.attr("height") - margin;

        svg.append("text")
            .attr("transform", "translate(100,0)")
            .attr("x", 50)
            .attr("y", 50)
            .attr("font-size", "24px")
            .text("XYZ Foods Stock Price")

        var x = d3.scaleBand().range([0, width]).padding(0.4),
            y = d3.scaleLinear().range([height, 0]);

        var g = svg.append("g")
            .attr("transform", "translate(" + 100 + "," + 100 + ")");

        var e = @Json.Serialize(ProductNames);
        var e2 = @Json.Serialize(counter);
        data =[]
        for (var i = 0; i < 2; i++) {
            data1 = { year: e[i], value: e2[i] }
            data.push(data1)
        }


        var data1 = [{
            'year': '2012',
            'value': 40
        },
        {
            'year': '2014',
            'value': 50
        },
        {
            'year': '2015',
            'value': 60
        }
        ]

        console.log(data)
        x.domain(data.map(function (d) { return d.year; }));
        y.domain([0, d3.max(data, function (d) { return d.value; })]);

        g.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x))
            .append("text")
            .attr("y", height - 250)
            .attr("x", width - 100)
            .attr("text-anchor", "end")
            .attr("stroke", "black")
            .text("year");

        g.append("g")
            .call(d3.axisLeft(y).tickFormat(function (d) {
                return "$" + d;
            }).ticks(10))
            .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 6)
            .attr("dy", "-5.1em")
            .attr("text-anchor", "end")
            .attr("stroke", "black")
            .text("Stock Price");

        g.selectAll(".bar")
            .data(data)
            .enter().append("rect")
            .attr("class", "bar")
            .on("mouseover", onMouseOver) //Add listener for the mouseover event
            .on("mouseout", onMouseOut)   //Add listener for the mouseout event
            .attr("x", function (d) { return x(d.year); })
            .attr("y", function (d) { return y(d.value); })
            .attr("width", x.bandwidth())
            .transition()
            .ease(d3.easeLinear)
            .duration(400)
            .delay(function (d, i) {
                return i * 50;
            })
            .attr("height", function (d) { return height - y(d.value); });
        ;

        //mouseover event handler function
        function onMouseOver(d, i) {
            d3.select(this).attr('class', 'highlight');
            d3.select(this)
                .transition()     // adds animation
                .duration(400)
                .attr('width', x.bandwidth() + 5)
                .attr("y", function (d) { return y(d.value) - 10; })
                .attr("height", function (d) { return height - y(d.value) + 10; });

            g.append("text")
                .attr('class', 'val')
                .attr('x', function () {
                    return x(d.year);
                })
                .attr('y', function () {
                    return y(d.value) - 15;
                })
                .text(function () {
                    return ['$' + d.value];  // Value of the text
                });
        }

        //mouseout event handler function
        function onMouseOut(d, i) {
            // use the text label class to remove label on mouseout
            d3.select(this).attr('class', 'bar');
            d3.select(this)
                .transition()     // adds animation
                .duration(400)
                .attr('width', x.bandwidth())
                .attr("y", function (d) { return y(d.value); })
                .attr("height", function (d) { return height - y(d.value); });

            d3.selectAll('.val')
                .remove()
        }





    </script>
</body>
</html>